{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../chatbot/chatbot.component\";\nimport * as i2 from \"@angular/cdk/drag-drop\";\nexport let BubbleComponent = /*#__PURE__*/(() => {\n  class BubbleComponent {\n    constructor() {\n      this.i = 0;\n    }\n\n    ngOnInit() {}\n\n    DragStart(event) {\n      var bubble = document.getElementById(\"bubble\");\n      var chatbot = document.getElementById(\"chatbot\");\n      bubble.classList.add(\"padding0\"); //if function to check if chatbot is open when attempt to drag\n\n      if (bubble.classList.contains(\"chatbotopen\")) {\n        bubble.classList.remove(\"chatbotopen\");\n        bubble.classList.add(\"draggingwhenopen\");\n        chatbot.style.transform = \"scale(0)\";\n        chatbot.style.transitionDuration = \"\";\n      }\n    }\n\n    DragEnd(event) {\n      var bubble = document.getElementById(\"bubble\");\n      var chatbot = document.getElementById(\"chatbot\");\n      var bubblepos = bubble.getBoundingClientRect();\n      var bodypos = document.body.getBoundingClientRect();\n      var total; //bubble 4 sides pos\n\n      let bubble_top = bubblepos.top;\n      let bubble_bot = bubblepos.bottom;\n      let bubble_left = bubblepos.left;\n      let bubble_right = bubblepos.right; //body 4 sides pos\n\n      let body_top = bodypos.top;\n      let body_bot = bodypos.bottom;\n      let body_left = bodypos.left;\n      let body_right = bodypos.right; //bubble 4 sides pos away from body in %\n\n      let top_offset_percentage = bubble_top / body_bot * 100;\n      let bottom_offset_percentage = (body_bot - bubble_bot) / body_bot * 100;\n      let left_offset_percentage = bubble_left / body_right * 100;\n      let right_offset_percentage = (body_right - bubble_right) / body_right * 100;\n      chatbot.style.top = \"\";\n      chatbot.style.bottom = \"\";\n      chatbot.style.left = \"\";\n      chatbot.style.right = \"\"; //Top left body container\n      //1 -\n      //- - \n\n      if (top_offset_percentage < 50 && left_offset_percentage < 50) {\n        if (top_offset_percentage > left_offset_percentage) {\n          //Left offset = 0%, Top remain offset %\n          chatbot.style.left = \"10%\";\n          this.elementPosition = {\n            x: -1 * window.innerWidth + window.innerWidth * 0.06,\n            y: bubble_top\n          }; //if function to readjust the chatbot overlapping\n\n          if (top_offset_percentage >= 35) {\n            total = top_offset_percentage - 15;\n            chatbot.style.top = total.toString() + \"%\";\n          } else {\n            chatbot.style.top = top_offset_percentage.toString() + \"%\";\n          }\n        } else {\n          //Top offset = 0%, Left remain offset %\n          chatbot.style.top = \"10%\";\n          chatbot.style.left = left_offset_percentage.toString() + \"%\";\n          this.elementPosition = {\n            x: -1 * window.innerWidth + bubble_right,\n            y: 0\n          };\n        }\n      } //Bottom left body container\n      //- - \n      //1 -\n      else if (bottom_offset_percentage < 50 && left_offset_percentage < 50) {\n        if (bottom_offset_percentage > left_offset_percentage) {\n          //Left offset = 0%, Bottom remain offset %\n          chatbot.style.left = \"10%\"; //if function to readjust the chatbot overlapping\n\n          if (bottom_offset_percentage > 35) {\n            total = bottom_offset_percentage - 15;\n            chatbot.style.bottom = total.toString() + \"%\";\n          } else {\n            total = bottom_offset_percentage + 5;\n            chatbot.style.bottom = total.toString() + \"%\";\n            console.log(\"left = 0, bottom left side.\");\n          }\n\n          this.elementPosition = {\n            x: -1 * window.innerWidth + window.innerWidth * 0.06,\n            y: bubble_top\n          };\n        } else {\n          //Bottom offset = 0%, Left remain offset%\n          chatbot.style.bottom = \"15%\";\n          chatbot.style.left = left_offset_percentage.toString() + \"%\";\n          this.elementPosition = {\n            x: -1 * window.innerWidth + bubble_right,\n            y: window.innerHeight - window.innerHeight * 0.08\n          };\n        }\n      } //Top right body container\n      //- 1\n      //- -\n      else if (top_offset_percentage < 50 && right_offset_percentage < 50) {\n        if (top_offset_percentage > right_offset_percentage) {\n          //Right offset = 0%, Top remain offset %\n          chatbot.style.right = \"10%\"; //if function to readjust chatbot overlapping\n\n          if (top_offset_percentage > 35) {\n            total = top_offset_percentage - 15;\n            chatbot.style.top = total.toString() + \"%\";\n          } else {\n            chatbot.style.top = top_offset_percentage.toString() + \"%\";\n          }\n\n          this.elementPosition = {\n            x: 0,\n            y: bubble_top\n          };\n        } else {\n          //Top offset = 0%, Right remain offset %\n          chatbot.style.top = \"10%\";\n          chatbot.style.right = right_offset_percentage.toString() + \"%\";\n          this.elementPosition = {\n            x: -1 * window.innerWidth + bubble_right,\n            y: 0\n          };\n        }\n      } //Bottom right body container\n      //- -\n      //- 1\n      else if (bottom_offset_percentage < 50 && right_offset_percentage < 50) {\n        if (bottom_offset_percentage > right_offset_percentage) {\n          //Right offset = 0%, Bottom remain offset %\n          chatbot.style.right = \"10%\"; //if function to readjust chatbot overlapping\n\n          if (bottom_offset_percentage >= 35) {\n            total = bottom_offset_percentage - 15;\n            chatbot.style.bottom = total.toString() + \"%\";\n            this.elementPosition = {\n              x: 0,\n              y: bubble_bot\n            };\n          } else {\n            total = bottom_offset_percentage + 5;\n            chatbot.style.bottom = total.toString() + \"%\";\n            console.log(\"right = 0, bottom right side.\" + chatbot.style.bottom);\n          }\n\n          this.elementPosition = {\n            x: 0,\n            y: bubble_top\n          };\n        } else {\n          //Bottom offset = 0%, Right remain offset %\n          chatbot.style.bottom = \"15%\";\n          chatbot.style.right = right_offset_percentage.toString() + \"%\";\n          this.elementPosition = {\n            x: bubble_right - window.innerWidth,\n            y: window.innerHeight - window.innerHeight * 0.08\n          };\n        }\n      } //To reset this.i value as DragEnd triggers click function\n\n\n      this.i = -1; //To check if chatbot is open while dragging, reopen when drag ends\n\n      if (bubble.classList.contains(\"draggingwhenopen\")) {\n        chatbot.classList.remove(\"draggingwhenopen\");\n        chatbot.style.transform = \"scale(1)\";\n        chatbot.style.transitionDuration = \"0.5s\";\n        chatbot.style.paddingRight = \"\";\n        this.i = -2;\n      }\n    }\n\n    open() {\n      var bubble = document.getElementById(\"bubble\");\n      var chatbot = document.getElementById(\"chatbot\");\n      this.i = this.i + 1;\n      console.log(this.i);\n\n      if (this.i % 2 == 0) {\n        bubble.classList.remove(\"chatbotopen\");\n        chatbot.style.transform = \"scale(0)\";\n        chatbot.style.transitionDuration = \"0.5s\";\n        chatbot.style.paddingRight = \"\";\n      } else {\n        if (bubble.classList.contains(\"padding0\")) {\n          bubble.classList.add(\"chatbotopen\");\n          chatbot.style.transform = \"scale(1)\";\n          chatbot.style.transitionDuration = \"0.5s\";\n        } else {\n          bubble.classList.add(\"chatbotopen\");\n          chatbot.style.transform = \"scale(1)\";\n          chatbot.style.transitionDuration = \"0.5s\";\n          chatbot.style.paddingRight = \"10%\";\n        }\n      }\n    }\n\n  }\n\n  BubbleComponent.ɵfac = function BubbleComponent_Factory(t) {\n    return new (t || BubbleComponent)();\n  };\n\n  BubbleComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BubbleComponent,\n    selectors: [[\"app-bubble\"]],\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"main-container\"], [\"id\", \"chatbot\"], [\"cdkDrag\", \"\", \"cdkDragBoundary\", \"body\", \"id\", \"bubble\", \"cdkDrag\", \"\", 1, \"bubble\", \"open\", 3, \"cdkDragFreeDragPosition\", \"click\", \"cdkDragStarted\", \"cdkDragEnded\"], [\"src\", \"/assets/icon.png\", 1, \"innerbubble\"]],\n    template: function BubbleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"app-chatbot\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵlistener(\"click\", function BubbleComponent_Template_div_click_2_listener() {\n          return ctx.open();\n        })(\"cdkDragStarted\", function BubbleComponent_Template_div_cdkDragStarted_2_listener($event) {\n          return ctx.DragStart($event);\n        })(\"cdkDragEnded\", function BubbleComponent_Template_div_cdkDragEnded_2_listener($event) {\n          return ctx.DragEnd($event);\n        });\n        i0.ɵɵelement(3, \"img\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"cdkDragFreeDragPosition\", ctx.elementPosition);\n      }\n    },\n    directives: [i1.ChatbotComponent, i2.CdkDrag],\n    styles: [\".main-container[_ngcontent-%COMP%]{display:flex;justify-content:flex-end}.bubble[_ngcontent-%COMP%]{background-color:#6495ed;width:6vw;height:8vh;border-radius:50%;cursor:pointer;display:flex;justify-content:center;align-content:flex-end;position:fixed;z-index:10}.bubble[_ngcontent-%COMP%]:hover{transform:scale(1.3);transition-duration:.25s}.innerbubble[_ngcontent-%COMP%]{display:flex;justify-content:center;align-self:center;height:7vh;width:5vw}#chatbot[_ngcontent-%COMP%]{position:absolute;transform:scale(0)}\"]\n  });\n  return BubbleComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}